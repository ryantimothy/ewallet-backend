// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "ewallet/entity"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepo is an autogenerated mock type for the TransactionRepo type
type TransactionRepo struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: _a0, _a1
func (_m *TransactionRepo) GetAll(_a0 int, _a1 entity.Query) ([]*entity.Transaction, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*entity.Transaction
	if rf, ok := ret.Get(0).(func(int, entity.Query) []*entity.Transaction); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, entity.Query) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopUp provides a mock function with given fields: _a0
func (_m *TransactionRepo) TopUp(_a0 *entity.Transaction) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Transaction) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transfer provides a mock function with given fields: tr
func (_m *TransactionRepo) Transfer(tr *entity.Transaction) error {
	ret := _m.Called(tr)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Transaction) error); ok {
		r0 = rf(tr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransactionRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionRepo creates a new instance of TransactionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionRepo(t mockConstructorTestingTNewTransactionRepo) *TransactionRepo {
	mock := &TransactionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
